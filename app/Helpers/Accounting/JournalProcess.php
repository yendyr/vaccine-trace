<?php

namespace app\Helpers\Accounting;

use Modules\Accounting\Entities\Journal;
use Modules\Accounting\Entities\JournalDetail;
use Modules\Accounting\Entities\JournalApproval;

use Modules\GeneralSetting\Entities\Currency;
use Modules\Procurement\Entities\PurchaseOrder;

use Modules\SupplyChain\Entities\StockMutation;
use Modules\SupplyChain\Entities\InboundMutationDetail;
use Modules\SupplyChain\Entities\OutboundMutationDetail;

use Illuminate\Http\Request;
use Illuminate\Support\Str;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Auth;
use Yajra\DataTables\Facades\DataTables;
use Carbon\Carbon;

class JournalProcess
{
    public static function totalDebit($JournalId)
    {
        $total_debit = JournalDetail::where('journal_id', $JournalId)
                                ->sum('debit');
        if($total_debit) {
            return $total_debit;
        }
        else {
            return 0;
        }
    }

    public static function totalCredit($JournalId)
    {
        $total_credit = JournalDetail::where('journal_id', $JournalId)
                                ->sum('credit');
        if($total_credit) {
            return $total_credit;
        }
        else {
            return 0;
        }
    }

    public static function isBalance($JournalId)
    {
        $total_debit = JournalDetail::where('journal_id', $JournalId)
                                ->sum('debit');
        $total_credit = JournalDetail::where('journal_id', $JournalId)
                                ->sum('credit');
        if($total_debit == $total_credit) {
            return true;
        }
        else {
            return false;
        }
    }

    public static function getPrimaryCurrency()
    {
        return Currency::where('status', 1)
        ->where('is_primary', 1)
        ->pluck('id')
        ->first();
    }

    public static function approve(Request $request, Journal $Journal)
    {
        if ($Journal->journal_details()->count() > 0) {
            if (JournalProcess::isBalance($Journal->id)) {
                $request->validate([
                    'approval_notes' => ['required', 'max:30'],
                ]);

                JournalApproval::create([
                    'uuid' =>  Str::uuid(),

                    'journal_id' =>  $Journal->id,
                    'approval_notes' =>  $request->approval_notes,

                    'owned_by' => $request->user()->company_id,
                    'status' => 1,
                    'created_by' => $request->user()->id,
                ]);
                return response()->json(['success' => 'Journal Data has been Approved']);
            }
            else {
                return response()->json(['error' => "Debit and Credit not Balance Yet"]);
            }
        }
        else {
            return response()->json(['error' => "This Journal doesn't Have Any Detail Data"]);
        }
    }

    public static function stockInboundAutoJournal(StockMutation $stockMutationRow) {
        DB::beginTransaction();

        foreach ($stockMutationRow->journal->journal_details as $journal_detail) {
            $journal_detail->delete();
        }
        $stockMutationRow->journal()->delete();

        $transaction_date = Carbon::parse($stockMutationRow->transaction_date);

        if ($stockMutationRow->inbound_mutation_details()->first()->purchase_order_detail) {
            $primary_currency_id = $stockMutationRow->inbound_mutation_details()->first()->purchase_order_detail->purchase_order->current_primary_currency_id;
        }
        else {
            $primary_currency_id = Self::getPrimaryCurrency();
        }
        
        // ----------------------- CREATE JOURNAL HEADER -------------------------
        $Journal = Journal::create([
            'uuid' =>  Str::uuid(),

            'transaction_date' => $transaction_date,
            'description' => 'Auto-Journal Generated by System.',

            'transaction_reference_id' => $stockMutationRow->id,
            'transaction_reference_class' => 'Modules\SupplyChain\Entities\StockMutation',
            'transaction_reference_text' => 'Warehouse Stock Inbound',
            'transaction_reference_url' => '/supplychain/mutation-inbound/' . $stockMutationRow->id,

            'current_primary_currency_id' => $primary_currency_id,
            'currency_id' => $primary_currency_id,
            'exchange_rate' => 1,

            'status' => 1,
            'owned_by' => Auth::user()->company_id,
            'created_by' => 0,
        ]);

        $code = 'JOURN-' .
        $transaction_date->year . '-' .
        str_pad($Journal->id, 5, '0', STR_PAD_LEFT);

        $Journal->update([
            'code' => $code
        ]);
        // ----------------------- END CREATE JOURNAL HEADER -------------------------

        // ----------------------- CREATE JOURNAL DETAIL -------------------------
        $target_items = InboundMutationDetail::with(['item.category' => function($q) {
                                                    $q->where('item_type', '!=', 'Service');
                                                }])
                                            ->where('stock_mutation_id', $stockMutationRow->id)
                                            ->get();
        $total_debit = 0;
        foreach ($target_items as $target_item) {
            $inventory_coa_id = $target_item->item->active_inventory_coa_id;

            if (!JournalDetail::where('journal_id', '=', $Journal->id)->where('coa_id', '=', $inventory_coa_id)->exists()) {
                JournalDetail::create([
                    'uuid' =>  Str::uuid(),

                    'journal_id' => $Journal->id,
                    'coa_id' => $inventory_coa_id,
                    'debit' => ($target_item->each_price_before_vat * $target_item->quantity),
                    'description' => 'Auto-Journal Generated by System.',

                    'owned_by' => Auth::user()->company_id,
                    'status' => 1,
                    'created_by' => 0,
                ]);
            }
            else {
                JournalDetail::where('journal_id', '=', $Journal->id)->where('coa_id', '=', $inventory_coa_id)->increment(
                    'debit', ($target_item->each_price_before_vat * $target_item->quantity)
                );
            }
            $total_debit += ($target_item->each_price_before_vat * $target_item->quantity);
        }
        JournalDetail::create([
            'uuid' =>  Str::uuid(),

            'journal_id' => $Journal->id,
            'coa_id' => 10,
            'credit' => $total_debit,
            'description' => 'Auto-Journal Generated by System.',

            'owned_by' => Auth::user()->company_id,
            'status' => 1,
            'created_by' => 0,
        ]);
        // ----------------------- END CREATE JOURNAL DETAIL -------------------------

        DB::commit();
    }

    public static function stockOutboundAutoJournal(StockMutation $stockMutationRow) {
        DB::beginTransaction();

        foreach ($stockMutationRow->journal->journal_details as $journal_detail) {
            $journal_detail->delete();
        }
        $stockMutationRow->journal()->delete();

        $transaction_date = Carbon::parse($stockMutationRow->transaction_date);
        $primary_currency_id = Self::getPrimaryCurrency();
        
        // ----------------------- CREATE JOURNAL HEADER -------------------------
        $Journal = Journal::create([
            'uuid' =>  Str::uuid(),

            'transaction_date' => $transaction_date,
            'description' => 'Auto-Journal Generated by System.',

            'transaction_reference_id' => $stockMutationRow->id,
            'transaction_reference_class' => 'Modules\SupplyChain\Entities\StockMutation',
            'transaction_reference_text' => 'Warehouse Stock Outbound',
            'transaction_reference_url' => '/supplychain/mutation-outbound/' . $stockMutationRow->id,

            'current_primary_currency_id' => $primary_currency_id,
            'currency_id' => $primary_currency_id,
            'exchange_rate' => 1,

            'status' => 1,
            'owned_by' => Auth::user()->company_id,
            'created_by' => 0,
        ]);

        $code = 'JOURN-' .
        $transaction_date->year . '-' .
        str_pad($Journal->id, 5, '0', STR_PAD_LEFT);

        $Journal->update([
            'code' => $code
        ]);
        // ----------------------- END CREATE JOURNAL HEADER -------------------------

        // ----------------------- CREATE JOURNAL DETAIL -------------------------
        $target_items = OutboundMutationDetail::with(['item_stock.item'])
                                            ->where('stock_mutation_id', $stockMutationRow->id)
                                            ->get();

        foreach ($target_items as $target_item) {
            $inventory_coa_id = $target_item->item_stock->item->active_inventory_coa_id;
            $cost_coa_id = $target_item->item_stock->item->active_cost_coa_id;

            if (!JournalDetail::where('journal_id', '=', $Journal->id)->where('coa_id', '=', $active_cost_coa_id)->exists()) {
                JournalDetail::create([
                    'uuid' =>  Str::uuid(),

                    'journal_id' => $Journal->id,
                    'coa_id' => $active_cost_coa_id,
                    'debit' => ($target_item->each_price_before_vat * $target_item->quantity),
                    'description' => 'Auto-Journal Generated by System.',

                    'owned_by' => Auth::user()->company_id,
                    'status' => 1,
                    'created_by' => 0,
                ]);
            }
            else {
                JournalDetail::where('journal_id', '=', $Journal->id)->where('coa_id', '=', $active_cost_coa_id)->increment(
                    'debit', ($target_item->item_stock->each_price_before_vat * $target_item->outbound_quantity)
                );
            }

            if (!JournalDetail::where('journal_id', '=', $Journal->id)->where('coa_id', '=', $inventory_coa_id)->exists()) {
                JournalDetail::create([
                    'uuid' =>  Str::uuid(),

                    'journal_id' => $Journal->id,
                    'coa_id' => $inventory_coa_id,
                    'credit' => ($target_item->each_price_before_vat * $target_item->quantity),
                    'description' => 'Auto-Journal Generated by System.',

                    'owned_by' => Auth::user()->company_id,
                    'status' => 1,
                    'created_by' => 0,
                ]);
            }
            else {
                JournalDetail::where('journal_id', '=', $Journal->id)->where('coa_id', '=', $inventory_coa_id)->increment(
                    'credit', ($target_item->item_stock->each_price_before_vat * $target_item->outbound_quantity)
                );
            }
        }
        // ----------------------- END CREATE JOURNAL DETAIL -------------------------

        DB::commit();
    }
}
